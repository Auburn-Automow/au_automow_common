#!/usr/bin/env python
# encoding: utf-8

"""
Drivers for ArduIMU

Created by John Harrison on 2010-04-16.
"""
__author__ = "John Harrison, William Woodall"
__copyright__ = "Copyright (c) John harrison, William Woodall"

import roslib; roslib.load_manifest('arduimu')
import rospy

from sensor_msgs.msg import Imu
from geometry_msgs.msg import Vector3, Quaternion
import tf

from hw_interface.arduimu_driver import ImuDriver, ImuBadMessage

def main():
  rospy.init_node("ardimu_driver")
  imu_data_topic = rospy.Publisher("imu_data", Imu)
  imu = ImuDriver(logger = rospy, tty_file="/dev/imu")
  imu.setMode('p')
  orientation_covariance = [-1.,0.,0.,0.,0.,0.,0.,0.,0.]
  ang_covar = [ 2.08508876e-06, 0, 0,
                0, 3.81202560e-07, 0,
                0, 0, 8.58619000e-07]
  lin_covar = [ 0.00714232, 0, 0,
                0, 0.00634921, 0,
                0, 0, 0.0054584 ]
  last_time = rospy.Time.now()
  while not rospy.is_shutdown():
    try: 
      msg = imu.getMsg()
      new_time = rospy.Time.now()

      time_diff = (new_time - last_time).to_sec()

      change_roll = float(msg.group('roll')) * time_diff
      change_pitch = float(msg.group('pitch')) * time_diff
      change_yaw = float(msg.group('yaw')) * time_diff
      orientation = tf.transformations.quaternion_from_euler(change_roll, change_pitch, change_yaw) 

      imu_msg = Imu(header = None,
                    orientation = Quaternion(orientation[0], orientation[1], orientation[2], orientation[3]),
                    orientation_covariance = orientation_covariance,
                    angular_velocity = 
                      Vector3(x=float(msg.group('roll')), 
                              y=float(msg.group('pitch')), 
                              z=float(msg.group('yaw'))),
                    angular_velocity_covariance = ang_covar,
                    linear_acceleration =
                      Vector3(x=float(msg.group('x')), 
                              y=float(msg.group('y')), 
                              z=float(msg.group('z'))),
                    linear_acceleration_covariance = lin_covar)
      imu_msg.header.stamp = rospy.Time.now()
      imu_data_topic.publish(imu_msg)
      last_time = new_time
    except ImuBadMessage as e:
      rospy.logerr(e.msg)

if __name__ == '__main__':
  main()
