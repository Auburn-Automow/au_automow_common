#!/usr/bin/env python
# encoding: utf-8

"""
driver.py - Provides an interface for communicating with the housekeeping board.

Created by William Woodall on 2010-05-02.
"""
__author__ = "William Woodall"

###  Imports  ###

# ROS imports
import roslib; roslib.load_manifest('housekeeping')
import rospy

# ROS msg and srv imports
from housekeeping.msg import Housekeeping
from housekeeping.srv import CutterControl

# Python Libraries
import sys

# Peer Libraries
import housekeeping.interface
from housekeeping.interface import HousekeepingBoard

###  Variables  ###
hkb = None
housekeeping_publisher = None

###  Functions  ###

def publishHousekeepingData(data):
    """Publishes encoder data"""
    global housekeeping_publisher
    msg = Housekeeping(float(data[1]), float(data[2]), float(data[3]), float(data[4]), 
                       float(data[5]), float(data[6]), bool(int(data[7])), bool(int(data[8])),
                       bool(int(data[9])), bool(int(data[10])), not bool(int(data[11])), not bool(int(data[12])))
    housekeeping_publisher.publish(msg)

def handleCuttersCmd(msg):
    """Called when a Cutter command is received"""
    global hkb
    return hkb.cutterControl(msg.LeftControl, msg.RightControl)

def main():
    global hkb, housekeeping_publisher
    # ROS init
    rospy.init_node("housekeeping_board_driver")
    # Get the command line arguments
    cmd_line_args = rospy.myargv(argv=sys.argv)
    # If the serial port command was passed use it otherwise pass nothing
    if len(cmd_line_args) > 1:
        hkb = HousekeepingBoard(cmd_line_args[1])
    else:
        hkb = HousekeepingBoard()
    # Register publishing callbacks
    hkb.onHousekeepingData = publishHousekeepingData
    # Setup Proteus Logging
    hkb.info = rospy.loginfo
    hkb.logerr = rospy.logerr
    # Setup Services and Topics
    housekeeping_publisher = rospy.Publisher("housekeeping", Housekeeping)
    rospy.Service("cutterControl", CutterControl, handleCuttersCmd)
    # Handle Service Requests until shutdown
    rospy.spin()
    # Tell Proteus to stop cleanly
    hkb.shutdown()

###  If Main  ###
if __name__ == '__main__':
    main()
