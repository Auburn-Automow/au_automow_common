#!/usr/bin/env python
# encoding: utf-8

###  Imports  ###

# ROS imports
import roslib; roslib.load_manifest('automow_launch')
import rospy
import tf

# ROS msg and srv imports
from dg14.msg import AutomowGPSInfo
from nav_msgs.msg import Odometry

# Python Libraries
import sys
import math

# Peer Libraries
from logerror import logError

###  Variables  ###
latest_gps = None
latest_gps_odom = None
latest_base_odom = None

###  Functions  ###

def receivedGPS(data):
    global latest_gps
    latest_gps = data.header.stamp.to_sec()
    compareStamps("GPS")

def receivedGPSOdom(data):
    global latest_gps_odom
    latest_gps_odom = data.header.stamp.to_sec()
    compareStamps("GPS Odom")

def receivedBaseOdom(data):
    global latest_base_odom
    latest_base_odom = data.header.stamp.to_sec()
    compareStamps("Base Odom")

def compareStamps(trigger):
    global latest_gps, latest_gps_odom, latest_base_odom
    rospy.loginfo("GPS: %f, GPS Odom: %f, Base Odom: %f, GPS-GPS Odom: %f,\tGPS Odom-Base Odom: %f,\tGPS-Base Odom: %f,\tTriggered by: %s" % (latest_gps, latest_gps_odom, latest_base_odom, (latest_gps-latest_gps_odom), (latest_gps_odom-latest_base_odom), (latest_gps-latest_base_odom), trigger))

def main():
    global odom_publisher
    # ROS init
    rospy.init_node("gps2odom", anonymous=True)
    # Get the command line arguments
    cmd_line_args = rospy.myargv(argv=sys.argv)
    # Setup Services and Topics
    gps_subscriber = rospy.Subscriber("gps_data", AutomowGPSInfo, receivedGPS)
    gps_subscriber = rospy.Subscriber("gps_odom", Odometry, receivedGPSOdom)
    gps_subscriber = rospy.Subscriber("base_odom", Odometry, receivedBaseOdom)
    # Handle GPS Data until shutdown
    rospy.spin()

###  If Main  ###
if __name__ == '__main__':
    main()
