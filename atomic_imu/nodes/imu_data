#!/usr/bin/env python
# encoding: utf-8

"""
Drivers for Atomic IMU

Created by John Harrison on 2010-04-16.
"""
__author__ = "John Harrison, William Woodall"

import roslib; roslib.load_manifest('atomic_imu')
import rospy

from time import sleep
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Vector3, Quaternion, PoseStamped, Point
import tf

from hw_interface.atomic_imu_driver import AtomicImuDriver, ImuBadMessage

def main():
  rospy.init_node("atomic_imu_driver")
  imu_data_topic = rospy.Publisher("imu_data", Imu)
  imu_pose_topic = rospy.Publisher("imu_pose", PoseStamped)
  imu = AtomicImuDriver(logger = rospy)
  imu.setMode('p')
  orientation_covariance = [1e-5,0.,0.,
                            0.,1e-5,0.,
                            0.,0.,1e-5]
  ang_covar = [ 2.08508876e-06, 0, 0,
                0, 3.81202560e-07, 0,
                0, 0, 8.58619000e-07]
  lin_covar = [ 0.00714232, 0, 0,
                0, 0.00634921, 0,
                0, 0, 0.0054584 ]
  last_time = rospy.Time.now()
  last_acceleration_roll
  last_acceleration_pitch
  last_acceleration_yaw
  abs_roll = 0
  abs_pitch = 0
  abs_yaw = 0
  while not rospy.is_shutdown():
    try: 
      msg = imu.getMsg()
      new_time = rospy.Time.now()

      time_diff = (new_time - last_time).to_sec()

      # Accumulate changes
      # distance = Initial_Velocity * time + (acceleration * time ** 2) / 2
      abs_roll  += last_velocity_roll * time_diff + (float(msg.group('roll')) * (time_diff ** 2))/2
      abs_pitch += last_velocity_pitch * time_diff + (float(msg.group('pitch')) * (time_diff ** 2))/2
      abs_yaw   += last_velocity_yaw * time_diff + (float(msg.group('yaw')) * (time_diff ** 2))/2
      last_velocity_roll = float(msg.group('roll')) * time_diff 
      last_velocity_pitch = float(msg.group('pitch')) * time_diff
      last_velocity_yaw = float(msg.group('yaw')) * time_diff
      # Calculate orientation quaterion 
      orientation = tf.transformations.quaternion_from_euler(abs_roll, abs_pitch, abs_yaw) 
      imu_msg = Imu(header = None,
                    orientation = Quaternion(orientation[0], orientation[1], orientation[2], orientation[3]),
                    orientation_covariance = orientation_covariance,
                    angular_velocity = 
                      Vector3(x=float(msg.group('roll')), 
                              y=float(msg.group('pitch')), 
                              z=float(msg.group('yaw'))),
                    angular_velocity_covariance = ang_covar,
                    linear_acceleration =
                      Vector3(x=float(msg.group('x')), 
                              y=float(msg.group('y')), 
                              z=float(msg.group('z'))),
                    linear_acceleration_covariance = lin_covar)
      imu_msg.header.frame_id = "base_imu"
      imu_msg.header.stamp = rospy.Time.now()
      imu_data_topic.publish(imu_msg)

      pose_msg = PoseStamped()
      pose_msg.header.frame_id = "base_imu"
      pose_msg.header.stamp = rospy.Time.now()
      pose_msg.pose.orientation = Quaternion(orientation[0], orientation[1], orientation[2], orientation[3])
      pose_msg.pose.position=Point(0,0,0)
      imu_pose_topic.publish(pose_msg)

      last_time = new_time
    except ImuBadMessage as e:
      rospy.logerr(e.msg)

if __name__ == '__main__':
  main()

# vim: set ft=python expandtab softtabstop=2 shiftwidth=2 tabstop=2
