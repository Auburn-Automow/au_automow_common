#!/usr/bin/env python
# encoding: utf-8

"""
Drivers for Atomic IMU

Created by John Harrison on 2010-04-16.
"""
__author__ = "John Harrison, William Woodall"

import roslib; roslib.load_manifest('atomic_imu')
import rospy

from time import sleep
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Vector3, Quaternion, PoseStamped, Point
import tf
import math

from hw_interface.atomic_imu_driver import AtomicImuDriver, ImuBadMessage

def main():
  rospy.init_node("atomic_imu_driver")
  imu_data_topic = rospy.Publisher("imu_data", Imu)
  imu_pose_topic = rospy.Publisher("imu_pose", PoseStamped)
  imu = AtomicImuDriver(logger = rospy)
  imu.setMode('p')
  orientation_covariance_constant = 1e-3
  ang_covar = [ 2.08508876e-06, 0, 0,
                0, 3.81202560e-07, 0,
                0, 0, 8.58619000e-07]
  lin_covar = [ 0.00714232, 0, 0,
                0, 0.00634921, 0,
                0, 0, 0.0054584 ]
  last_time = rospy.Time.now()
  abs_roll = 0
  abs_pitch = 0
  abs_yaw = 0
  prev_yaw = (0,0,0)
  while not rospy.is_shutdown():
    try: 
      msg = imu.getMsg()
      new_time = rospy.Time.now()
      
      # time_diff = (new_time - last_time).to_sec()
      time_diff = 0.04
      
      # Accumulate changes
      #abs_roll  += float(msg.group('roll')) * time_diff 
      #abs_pitch += float(msg.group('pitch')) * time_diff 
      if msg.group('yaw') != "-0.0681":
	yaw = float(msg.group('yaw')) + (1/6) * (prev_yaw[2] + 2*prev_yaw[1] + 2*prev_yaw[0] + float(msg.group('yaw')))
        abs_yaw   += yaw * time_diff
	prev_yaw = (float(msg.group('yaw')),prev_yaw[0],prev_yaw[1]) 
     
      # if msg.group('yaw') != "+0.0000":
      #   rospy.loginfo("Diff: %s %s %s" % (msg.group('roll'), msg.group('pitch'), msg.group('yaw')))
      # rospy.loginfo("Roll: %f, Pitch: %f, Yaw: %f" % (math.degrees(abs_roll), math.degrees(abs_pitch), math.degrees(abs_yaw)))
      # Calculate orientation quaterion 
      orientation = tf.transformations.quaternion_from_euler(abs_roll, abs_pitch, abs_yaw) 
      imu_msg = Imu()
      imu_msg.orientation.x = orientation[0]
      imu_msg.orientation.y = orientation[1]
      imu_msg.orientation.z = orientation[2]
      imu_msg.orientation.w = orientation[3]
      if yaw==0:
          imu_msg.orientation_covariance = [1e-1,0.,0.,
                                            0.,1e-1,0.,
                                            0.,0.,1e-1]
      else:
          imu_msg.orientation_covariance = [orientation_covariance_constant*(1/abs(yaw)),0.,0.,
                                            0.,orientation_covariance_constant*(1/abs(yaw)),0.,
                                            0.,0.,orientation_covariance_constant*(1/abs(yaw))]
      imu_msg.header.frame_id = "base_imu"
      imu_msg.header.stamp = rospy.Time.now()
      imu_msg.angular_velocity.x = float(msg.group('roll'))
      imu_msg.angular_velocity.y = float(msg.group('pitch'))
      imu_msg.angular_velocity.z = float(msg.group('yaw'))
      imu_msg.linear_acceleration.x = float(msg.group('x'))
      imu_msg.linear_acceleration.y = float(msg.group('y'))
      imu_msg.linear_acceleration.z = float(msg.group('z'))
      imu_data_topic.publish(imu_msg)
      
      pose_msg = PoseStamped()
      pose_msg.header.frame_id = "odom_combined"
      pose_msg.header.stamp = rospy.Time.now()
      pose_msg.pose.orientation.x = orientation[0]
      pose_msg.pose.orientation.y = orientation[1]
      pose_msg.pose.orientation.z = orientation[2]
      pose_msg.pose.orientation.w = orientation[3]
      pose_msg.pose.position=Point(0,0,0)
      imu_pose_topic.publish(pose_msg)
      
      last_time = new_time
    except ImuBadMessage as e:
      rospy.logerr(e.msg)

if __name__ == '__main__':
  main()

# vim: set ft=python expandtab softtabstop=2 shiftwidth=2 tabstop=2
