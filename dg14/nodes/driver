#!/usr/bin/env python
# encoding: utf-8

"""
driver.py - ROS Node for publishing GPS data.

Created by William Woodall on 2010-05-18.
"""
__author__ = "William Woodall"

###  Imports  ###

# Python Libraries
import sys

# ROS imports
import roslib; roslib.load_manifest('dg14')
import rospy

# ROS msg and srv imports
from dg14.msg import AutomowGPSInfo

# Peer Libraries
import dg14.interface
from dg14.interface import DG14GPS
from logerror import logError

###  Variables  ###
gps = None
gps_publisher = None

###  Functions  ###

def publishGPSData(data):
    """Publishes encoder data"""
    global gps_publisher
    msg = AutomowGPSInfo()
    try:
        msg.header.stamp = rospy.Time.now()
        msg.latitude = data[1] or 0.0
        msg.longitude = data[2] or 0.0
        msg.altitude = data[3] or 0.0
        msg.utm_e = data[4] or 0.0
        msg.utm_n = data[5] or 0.0
        msg.utm_zone = data[6]
        msg.track = data[7] or 0.0
        msg.hdop = data[8] or 0.0
        msg.vdop = data[9] or 0.0
        msg.err_horz = data[10] or 0.0
        msg.err_vert = data[11] or 0.0
        msg.status = data[12] or 0
        msg.satellites = data[13] or 0
    except:
        logError(sys.exc_info(), rospy.logerr, "Exception generating GPSInfo Message")
    gps_publisher.publish(msg)

def main():
    global gps, gps_publisher
    # ROS init
    rospy.init_node("dg14_gps_driver")
    # Get the command line arguments
    cmd_line_args = rospy.myargv(argv=sys.argv)
    # If the serial port command was passed use it otherwise pass nothing
    if len(cmd_line_args) > 1:
        gps = DG14GPS(cmd_line_args[1])
    else:
        gps = DG14GPS()
    # Register publishing callbacks
    gps.onPublishGPS = publishGPSData
    # Setup Logging
    gps.info = rospy.loginfo
    gps.logerr = rospy.logerr
    # Setup Services and Topics
    gps_publisher = rospy.Publisher("gps_data", AutomowGPSInfo)
    # Start the GPS
    rospy.loginfo("GPS Starting")
    while not rospy.is_shutdown():
        if gps.start():
            break
        rospy.logerr("GPS Not Responding, retrying in 2s")
        rospy.sleep(2)
    rospy.loginfo("GPS Started")
    # Handle GPS Data until shutdown
    while not rospy.is_shutdown():
        if not gps.getData():
            #rospy.logwarn("Not gps data received, this time...")
            pass
    # Tell the GPS to stop cleanly
    gps.shutdown()

###  If Main  ###
if __name__ == '__main__':
    main()
