#!/usr/bin/env python
# encoding: utf-8

"""
driver.py - ROS Node for converting GPS data into odometry data.

Created by William Woodall on 2010-05-19.

This node takes two parameters to set up the GPS coordinate frame.

magnetic_heading	-	Heading relative to magnetic north, read from a compass
magnetic_declination	-	Magnetic declination for the area, read from the NSGS
"""
__author__ = "William Woodall"

###  Imports  ###

# ROS imports
import roslib; roslib.load_manifest('dg14')
import rospy
import tf

# ROS msg and srv imports
from dg14.msg import AutomowGPSInfo
from nav_msgs.msg import Odometry

# Python Libraries
import sys
import math

# Peer Libraries
from logerror import logError

###  Variables  ###
odom_publisher = None
initial_position = None
magnetic_heading = None
magnetic_declination = None
odom_broadcaster = None

MAX_DBL = 1e100
###  Functions  ###

def publishOdomData(data):
    """Publishes Odometry Data give GPS data"""
    global magnetic_heading, magnetic_declination
    global odom_publisher, initial_position, gps_broadcaster
    # If first message received, save as initial position
    if data.status == 0:
        return
    if initial_position == None:
        initial_position = data
        return
    true_heading = magnetic_heading - magnetic_declination
    if true_heading < 0:
        true_heading += 360
    
    # Calculate Change in position    
    gps_y = data.utm_e - initial_position.utm_e 
    gps_x = data.utm_n - initial_position.utm_n
    
    z = 0 # Ignoring altitude
    yaw = math.radians(data.track - initial_position.track)
    quat = tf.transformations.quaternion_from_euler(0,0,yaw)
    
    # Setup Odometry message
    msg = Odometry()
    msg.header.stamp = data.header.stamp
    msg.header.frame_id = "gps_frame"
    msg.pose.pose.position.x = gps_x
    msg.pose.pose.position.y = gps_y
    msg.pose.pose.position.z = z
    msg.pose.pose.orientation.x = quat[0]
    msg.pose.pose.orientation.y = quat[1]
    msg.pose.pose.orientation.z = quat[2]
    msg.pose.pose.orientation.w = quat[3]
    msg.pose.covariance = [1.5, 0, 0, 0, 0, 0,
                           0, 1.5, 0, 0, 0, 0,
                           0, 0, MAX_DBL, 0, 0, 0,
                           0, 0, 0, MAX_DBL, 0, 0,
                           0, 0, 0, 0, MAX_DBL, 0,
                           0, 0, 0, 0, 0, 1e2]
    # Publish the message
    odom_publisher.publish(msg)
    true_heading = magnetic_heading - magnetic_declination
    if true_heading < 0:
        true_heading += 360
    gps_broadcaster.sendTransform((0,0,0),
                                  tf.transformations.quaternion_from_euler(math.pi,0,math.radians(true_heading)),
                                  rospy.Time.now(),
                                  "gps_frame",
                                  "odom_combined")

def main():
    global magnetic_heading, magnetic_declination
    global odom_publisher,gps_broadcaster
    # ROS init
    rospy.init_node("gps2odom", anonymous=True)
    # Get the command line arguments
    cmd_line_args = rospy.myargv(argv=sys.argv)
    # Setup Services and Topics
    odom_publisher = rospy.Publisher("gps_odom", Odometry)
    gps_subscriber = rospy.Subscriber("gps_data", AutomowGPSInfo, publishOdomData)
    # Setup Transform to account for difference in heading
    magnetic_heading = rospy.get_param('magnetic_heading', 0)
    magnetic_declination = rospy.get_param('magnetic_declination', 0)
    gps_broadcaster = tf.TransformBroadcaster() 
    # Handle GPS Data until shutdown
    rospy.spin()

###  If Main  ###
if __name__ == '__main__':
    main()
#vim: set ft=python expandtab softtabstop=2 shiftwidth=2 tabstop=2

