#!/usr/bin/env python
# encoding: utf-8

###  Imports  ###

# ROS imports
import roslib; roslib.load_manifest('automow_actionlib')
import rospy
import actionlib
from time import sleep
import math
import tf

# ROS msg and srv imports
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
# from housekeeping.srv import CutterControl

# Python Libraries
import sys

# Peer Libraries

###  Variables  ###
destination = None

###  Functions  ###

def main():
    # sleep(10)
    global destination
    rospy.init_node("qualification_navigation")
    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
    client.wait_for_server()
    
    # try:
        # cutterControl = rospy.ServiceProxy('cutterControl', CutterControl)
        # cutterControl(True, True)
    # except:
        # rospy.logerr("Failed to start cutters")
    
    # First move
    destination = MoveBaseGoal()
    destination.target_pose.header.frame_id = "odom_combined"
    destination.target_pose.header.stamp = rospy.Time.now()
    
    destination.target_pose.pose.position.x = 0.668
    destination.target_pose.pose.position.y = 8.99
    # quat = tf.transformations.quaternion_from_euler(0, 0, math.radians(90))
    destination.target_pose.pose.orientation.z = 0.692
    destination.target_pose.pose.orientation.w = 0.721
    
    client.send_goal(destination)
    
    client.wait_for_result()
    
    # Second move
    destination.target_pose.header.stamp = rospy.Time.now()
    
    destination.target_pose.pose.position.x = 0.613
    destination.target_pose.pose.position.y = 14.671
    # quat = tf.transformations.quaternion_from_euler(0, 0, math.radians(90))
    destination.target_pose.pose.orientation.z = -0.227
    destination.target_pose.pose.orientation.w = 0.974
    
    client.send_goal(destination)
    
    client.wait_for_result()
    
    # Third Move
    destination.target_pose.header.stamp = rospy.Time.now()
    
    destination.target_pose.pose.position.x = 5.33
    destination.target_pose.pose.position.y = 14.49
    # quat = tf.transformations.quaternion_from_euler(0, 0, math.radians(90))
    destination.target_pose.pose.orientation.z = -0.7
    destination.target_pose.pose.orientation.w = 0.7
    
    client.send_goal(destination)
    
    client.wait_for_result()
    
    # Final Move
    destination.target_pose.header.stamp = rospy.Time.now()
    
    destination.target_pose.pose.position.x = 5.62
    destination.target_pose.pose.position.y = 9.27
    # quat = tf.transformations.quaternion_from_euler(0, 0, math.radians(90))
    destination.target_pose.pose.orientation.z = -0.989
    destination.target_pose.pose.orientation.w = 0.142
    
    client.send_goal(destination)
    
    client.wait_for_result()

###  If Main  ###
if __name__ == '__main__':
    try:
        main()
    except Exception as err:
        rospy.logerr("Unhandled Exception in Qualification Node: \n"+str(err))
    finally:
        client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        client.wait_for_server()

        # try:
            # cutterControl = rospy.ServiceProxy('cutterControl', CutterControl)
            # cutterControl(True, True)
        # except:
            # rospy.logerr("Failed to start cutters")

        # First move
        destination = MoveBaseGoal()
        destination.target_pose.header.frame_id = "base_link"
        destination.target_pose.header.stamp = rospy.Time.now()

        destination.target_pose.pose.position.x = 0.0
        destination.target_pose.pose.position.y = 0.0
        quat = tf.transformations.quaternion_from_euler(0, 0, math.radians(0))
        destination.target_pose.pose.orientation.z = quat[2]
        destination.target_pose.pose.orientation.w = quat[3]

        client.send_goal(destination)

        client.wait_for_result()
