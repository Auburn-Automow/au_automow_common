#!/usr/bin/env python

PKG = 'automow_controller'

import roslib; roslib.load_manifest(PKG)

import rospy
import tf
import actionlib
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
import automow_controller.msg

class TurnAction(object):
    _feedback = automow_controller.msg.DoTurnFeedback()
    _result = automow_controller.msg.DoTurnResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name,
                automow_controller.msg.DoTurnAction, execute_cb=self.execute_cb,
                auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        print goal

class ControllerNode:
    def __init__(self):
        self.odom_sub = rospy.Subscriber("/ekf/odom", Odometry, self.odom_cb)
        self.cmd_vel_pub = rospy.Publisher("/cmd_vel", Twist)
        self.tf_listener = tf.TransformListener()
        self.turnaction = TurnAction(rospy.get_name())

    def odom_cb(self, msg):
        pass

def main():
    rospy.init_node(PKG)
    control_node = ControllerNode()
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main()
    
